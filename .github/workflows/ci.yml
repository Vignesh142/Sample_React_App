name: CI Pipeline

on:
    push:
        branches:
            - main
            - dev
    pull_request:
        branches:
            - main
            - dev

jobs:
    build:
        name: Build and Test React App
        runs-on: ubuntu-latest

        permissions:
            contents: write
            actions: write
            
        steps:
            - name: Show Environment Variables
              run: env

            - name: Multi-line Message
              run: |
                echo "‚úÖ Starting Build"
                echo "üî® Installing Dependencies"
                echo "üéØ Running Tests"

            - name: Checkout Code
              uses: actions/checkout@v3

            - name: Setup NodeJS
              uses: actions/setup-node@v4
              with: 
                node-version: '20'

            - name: Cache Node Modules
              uses: actions/cache@v3
              with:
                  path: ~/.npm # ‚úÖ Cache npm files
                  key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                    npm-${{ runner.os }}-
            
            - name: Install Dependencies
              run: npm install

            - name: Build Project
              run: npm run build
            

            - name: Completed CI Pipeline
              run: echo "CI Pipeline Completed Successfully"

            # ‚úÖ Save Artifacts for Later Use in Deployment
            - name: Save Build Output
              uses: actions/upload-artifact@v4
              with:
                name: build-output
                path: build
                retention-days: 7

            - name: Debug Build Output
              run: ls -R build

    deploy:
        needs: build
        name: Deploy React App
        runs-on: ubuntu-latest

        permissions:
            contents: write
            actions: write

        steps:
            - name: Checkout Code
              uses: actions/checkout@v3

            - name: Restore Node Modules
              uses: actions/cache@v3
              with:
                path: ~/.npm # ‚úÖ Restore npm files
                key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
                restore-keys: |
                  npm-${{ runner.os }}-
                
            - name: Install Dependencies
              run: npm install

            - name: Download Build Output
              uses: actions/download-artifact@v4
              with:
                name: build-output
                path: build
      
            # ‚úÖ Confirm artifact files exist
            - name: Debug Downloaded Files
              run: ls -R build || echo "üö® No files downloaded!"

            - name: Download Build Output
              uses: actions/download-artifact@v4
              with:
                name: build-output
                path: build

            - name: Start React App
              run: |
                  nohup npx serve -s build -l 3000 > serve.log 2>&1 &
                  echo "‚è≥ Waiting for server to start..."
                  
                  # ‚úÖ Retry loop for server readiness
                  for i in {1..10}; do
                    if curl -s http://localhost:3000 > /dev/null; then
                      echo "‚úÖ Server is UP!"
                      break
                    else
                      echo "üö® Server not ready, retrying in 3s..."
                      sleep 3
                    fi
                  done
              
                  # ‚úÖ Show server logs for debugging
                  echo "üìù Server logs:"
                  cat serve.log

            # Step 5: Install ngrok
            - name: Install ngrok
              run: npm install -g ngrok

            - name: Expose with ngrok
              run: |
                ngrok authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
                ngrok http 3000 &
                sleep 5
                curl http://localhost:4040/api/tunnels

            - name: Completed Deployment
              run: echo "Deployment Completed Successfully"

            - name: Get ngrok URL
              run: |
                URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
                echo "üîó Public URL: $URL"

            # ‚úÖ Keep ngrok Running
            - name: Keep Server Alive
              run: |
                while true; do
                    curl -s http://localhost:4040/api/tunnels
                    sleep 30
                done
